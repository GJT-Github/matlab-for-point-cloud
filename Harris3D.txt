pointdata = pointcloud.Location; % n*3
 mr = pointcloud_mr(pointcloud);
 kp=6;
%  normal = pcnormals(pointcloud,kp);
%  %-----------------球形邻域搜索------------------
[indx,~] = rangesearch(pointdata,pointdata,mr*kp);
%------------------协方差矩阵--------------------
normal = zeros(3,length(pointdata));
for i=1:length(pointdata)
nei_point =pointdata(indx{i}(2:end),:);
cur_point =pointdata(i,:);
mean_point =mean(nei_point);
n = length(indx{i}(2:end));
Nei = nei_point - repmat(mean_point,n,1);
C = (Nei)' *  (Nei) /n;
%------------------新邻域点集合-------------------
[V,~] = eig(C);
nor = V(:,1);
if size(nei_point,1)<1
    continue
elseif size(nei_point,1)<2
   flag = dot(nor,nei_point - cur_point);
else
        flag = dot(nor,sum(repmat(cur_point,n,1) -nei_point));
end
if flag <0
    nor = -nor;
end
normal(:,i) = nor;
end
normal = normal';
 %-----------------球形邻域搜索------------------
[indx1,~] = rangesearch(pointdata,pointdata,k*mr);
R3d = zeros(length(pointdata),1);
 for i=1:length(pointdata)
nei_normal =normal(indx1{i}(2:end),:)';
n = length(indx1{i}(2:end));
M3d = (nei_normal * nei_normal')./n;
% R3d(i) = det(M3d) - 0.04 *(trace(M3d)^2);
R3d(i) =det(M3d)/(trace(M3d))^2;
 end
 index=find(R3d>-0.3);
 fea_ind = [];
 [indx2,~] = rangesearch(pointdata,pointdata,6*mr);
 for j =1:length(index)
    nei_p = indx2{index(j)};
    nei_p_r3d = R3d(nei_p);
    [~,ind]=max(nei_p_r3d);
    if ind(1) == 1
        fea_ind = [fea_ind ;index(j)];
    end
 end
feature_point =pointdata(fea_ind,:);
outpointcloud = pointCloud(feature_point);